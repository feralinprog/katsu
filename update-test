#!/bin/bash

show_options ()
{
    echo "Test options are:"
    for f in $(find test -name "*.katsu"); do
        echo "  $(basename $f .katsu)"
    done
}

if [ $# -ne 1 ]; then
    echo "usage: ./update-test <name>   -- runs test/<test>.katsu in order to generate test/<name>.stdout and test/<name>.stderr" >&2
    echo "       ./update-test -a|--all -- updates all tests under test/" >&2
    show_options >&2
    exit 1
fi

./run b

update_test ()
{
    name="$1"

    echo "============ RUNNING test/$name.katsu ==============="

    if [ ! -f "test/$name.katsu" ]; then
        echo "test/$name.katsu does not exist" >&2
        show_options >&2
        exit 1
    fi

    if [ -f "test/$name.stdin" ]; then
        stdin="test/$name.stdin"
    else
        stdin=/dev/null
    fi

    # TODO: why does this put stderr also in stdout?
    # out/katsu test test/$name.katsu > >(tee test/$name.stdout) 2> >(tee test/$name.stderr)
    out/katsu test test/$name.katsu <$stdin >test/$name.stdout 2>test/$name.stderr
    exit_code=$?
    echo "------ stdout -------"
    cat test/$name.stdout
    echo "------ stderr -------"
    cat test/$name.stderr
    echo "------ exit code -------"
    echo $exit_code
    if [ $exit_code -eq 0 ]; then
        rm -f test/$name.exitcode
    else
        echo $exit_code > test/$name.exitcode
    fi

    if [ ! -s "test/$name.stderr" ]; then
        rm -f test/$name.stderr
    fi
}

case "$1" in
    -a|--all)
        for f in $(find test -name "*.katsu"); do
            update_test $(basename $f .katsu)
        done
        ;;
    *)
        update_test "$1"
        ;;
esac
