TODO:
* int64 / uint64 and bignums
* FFI and lua-style userdata (or similar)
* invoke ops should have the actual multimethod, not the name to lookup in module
* coroutines / fibers (should be supported by delimited continuations..?)
* support builtin modules and module loading, in order to actually start a standard library / core
* allow for docs everywhere!
* save to image and load from image
* allow mut:s at module level
* handle more errors in C++ and raise as conditions
* split multimethod declaration and method addition? or leave effectively global multimethods?

more TODO:
* literal data structure syntax?
  * %{ { key; value}; { key; value } ... }
* modules should provide warnings at the end (e.g. potential for ambiguous multimethod dispatch)
* allow force-inlining at call site?
* let:do: should allow marking arguments optional (-> just generate all combos)
* macros / annotations / hook in to parser for custom syntax?
  * tail-call
  * 'let' syntax
  * replace @ret [...] with [...] call/rc w/ slot added so return: uses the return-continuation

References for delimited continuations:
* I used the following sources most directly:
  - https://www.deinprogramm.de/sperber/papers/shift-reset-direct.pdf
  - https://cs.ru.nl/~dfrumin/notes/delim.html
  - https://gist.github.com/sebfisch/2235780
* Some further resources (I haven't fully processed these yet):
  - https://okmij.org/ftp/continuations/implementations.html#dynamic-wind
  - http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-e.pdf
  - https://okmij.org/ftp/continuations/caml-shift-journal.pdf
  - https://www.gnu.org/software/guile/manual/html_node/Shift-and-Reset.html
