pretty-print: 10 + 20

method: [adder: (n0: Fixnum)] does: [
    mut: n = n0
    let: delta = n0 + 30
    \x [
        let: new-n = n + delta + x
        n: new-n
        n
    ]
]

let: a = (adder: 3)
pretty-print: a
pretty-print: (a call: 0) # 3 + 33 + 0 = 36
pretty-print: (a call: 2) # 36 + 33 + 2 = 71

pretty-print: 5 type
pretty-print: a type
a instance?: Fixnum
a instance?: Closure

print: "this is " ~ "a test"

method: [if: (cond: Bool) then: tbody else: fbody] does: [
    # TODO: `then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: (cond then: tbody else: fbody)
]

method: [if: (cond: Bool) then: tbody] does: [
    # TODO: `then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: (cond then: tbody else: null)
]

method: [while: (cond: Closure) do: (body: Closure)] does: [
    # TODO: `then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: ((cond call) then: [
        body call
        TAIL-CALL: (while: cond do: body)
    ] else: null)
]

method: [run-test] does: [
    mut: n = 1000000
    while: [n > 0] do: [
        if: (n / 10000) * 10000 = n then: [
            pretty-print: n
        ]
        n: n - 1
    ]
]
(null) run-test

data: Point has: { x; y }
data: Point3D extends: { Point } has: { z }
let: p = (Point3D x: 1 y: 2 z: 3)
p .x
p .y
p .z
(p x: 5; null)
(p y: 6; null)
(p z: 7; null)
p .x
p .y
p .z

p Point?
p Point3D?

(Point x: 1 y: 2) Point3D?

data: Optional has: {}
data: OptionalSome extends: { Optional } has: { value }
data: OptionalNone extends: { Optional } has: {}

method: [some: value] does: [ OptionalSome value: value ]
method: [none]        does: [ OptionalNone new ]

method: [(opt: OptionalSome) then: some-body else: none-body] does: [
    some-body call: opt .value
]
method: [(opt: OptionalNone) then: some-body else: none-body] does: [
    none-body call
]

(some: 5) then: [pretty-print: it] else: [print: "none"]
(null none) then: [pretty-print: it] else: [print: "none"]

method: [signal: thing] does: [
    pretty-print: thing
]

method: [(opt: Optional) value!] does: [
    opt then: [it] else: [signal: (NoneValue message: "none has no value")]
]

(null none) value!
