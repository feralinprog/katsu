let: [adder: n0] do: [
    mut: n = n0
    let: delta = n0
    \x [
        let: s = x + delta
        let: new-n = n + s
        set-n: new-n
        n
    ]
]

let: a = (adder: 3)
print: (a call: 1)
print: (a call: 2)

adder:
======
regs:
- 0: n0
- 1: ref: n
- 2: delta
module:
- a: (whatever value)
bytecode:
  load_reg 0
  store_ref 1
  load_reg 0
  store_reg 2
  load_reg 1 # note _reg_ and not _ref_, since this is setting up the closure!
  load_reg 2
  make_closure <bytecode for \x [...]>

####################
# compiling \x [...]
####################
         x              # already in bindings
             delta      # (1-up) upvar, not in bindings yet
                        # - add to local bindings (pretend it's new let:)
                        # - add new local binding to upreg-mapping
                        # - add 1-up local index to list of closed-over variables (so adder knows how to make_closure)
         x + delta      # invoke +:
let: s = x + delta      # add local binding
             n          # (1-up) upvar, not in bindings yet. do same ops as above.
                 x      # already in bindings
             n + x      # invoke +:
let: new-n = n + x      # add local binding
       new-n            # already in bindings
set-n: new-n            # mutable n already in bindings
n                       # already in bindings

\x [ ... ]
==========
regs: -- arguments, then [closed-over regs and any locals] (in possibly any order)
- 0: x
- 1: delta
- 2: s
- 3: ref:n
- 4: new-n
upreg-mapping:
- upreg 0 -> reg 1
- upreg 1 -> reg 3
closed-over-vars (to generate make_closure code):
- upreg 0 <- adder local 2 (delta)
- upreg 1 <- adder local 1 (ref:n)
module:
- a: (whatever value)
from the closure object itself (at runtime):
- upregs: {values of ref:n and delta from adder:}
bytecode:
  <implicit>:
    load upreg 0 (delta), store to 1 (per upreg-mapping)
    load upreg 1 (ref:n), store to 3 (per upreg-mapping)
  load_reg 0
  load_reg 1
  invoke +:
  store_reg 2
  load_ref 3
  load_reg 0
  invoke +:
  store_reg 4
  load_reg 4
  store_ref 3
  load_ref 3

let: a = (adder: 3)
===================
bytecode:
  load_value <fixnum 3>
  invoke adder:
  store_module <string "a">
  load_module <string "a">