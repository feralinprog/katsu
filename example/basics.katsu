# TODO: try the Y combinator with quotes... does this break the compiler?

# TODO: need to fix the inlining argument re-binding.
# phi nodes need to know which basic block argument comes from, not just which argument it is...
let: [a swap: b] do: [
    print: a
    TAIL-CALL: (b swap: a)
] :: { +inline; +tail-recursive }
"a" swap: "b"

let: [(n: Number) recurse] do: [
    if: n > 0 then: [
        print: n
        TAIL-CALL: (n - 1) recurse
    ] else: [
        print: "done!"
    ]
]
2 recurse

let: [if: (cond: Bool) then: body] do: [
    TAIL-CALL: (if: cond then: body else: null)
] :: { +inline }
let: [(n: Number) recurse] do: [
    if: n > 0 then: [
        print: n
        TAIL-CALL: (n - 1) recurse
    ]
]
2 recurse

let: [sum: a and: b and: c] do: [
    let: x = a + b
    let: y = x + c
    y
] :: { +inline }
print: (sum: 1 and: 2 and: 3)

let: [(a: Number) plus: (b: Number)] do: [
    a + b
]
print: (1 plus: 2)

let: [a str~: b] do: [
    a >string ~ b >string
]
print: ("abc" str~: 2)

# TODO: precompute <null> and use this, so it's not looked up at runtime.
# (really, figure out how this can work. maybe something like:
# >> let: [if: cond then: body] do: (bake: [ if: cond then: body else: $null ])
# where :bake: replaces any instances of a `$ expr` unary operator with `expr call`)
let: [if: (cond: Bool) then: body] do: [ TAIL-CALL: (if: cond then: body else: [ null ]) ] :: { +inline }
let: [if: cond then: body] do: [ "blah" ]
if: 2 > 1 then: [ print: "good: 2 > 1" ]
if: t == f then: [ print: "bad! t == f" ] else: [ print: "good: t != f" ]

mut: a = 5
print: a
set-a: 10
print: a

# +inline tells the compiler that this should be strictly inlined at every call site
# +tail-recursive is more of an optimization hint; it tells the compiler to expect this method body
#   to be called recursively in tail position, so it can be converted from recursion into iteration.
#   Without this annotation, tail call optimization will still apply (so call stack size is bounded),
#   but this would _not_ be directly compiled into a while loop.
#   NOTE: this hint is pessimistic if the body is not actually tail-recursive, and prohibits various
#       other optimizations.
let: [while: (cond: Quote) do: (body: Quote)] do: [
    if: cond call then: [
        body call
        TAIL-CALL: (while: cond do: body)
    ]
] :: { +inline }

let: [test-while] do: [
    mut: i = 10
    while: [i > 0] do: [
        print: i
        set-i: i - 1
        print: i
    ]
]
test-while

let: [from: low to<: high do: (body: Quote)] do: [
    mut: i = low
    while: [i < high] do: [
        body call: i
        set-i: i + 1
    ]
]
from: 0 to<: 10 do: \i [
    print: i
]

print: ((1, 2, 3), 4,)
print: t and f
print: not t
print: - 5
print: (1 + 3 * 6 / 2 * 3) == 4

let: [vec each: action] do: [
    mut: i = 0
    while: [i < vec length] do: [
        action call: (vec at: i)
        set-i: i + 1
    ]
]

let: [vec each-reversed: action] do: [
    mut: i = vec length - 1
    while: [i >= 0] do: [
        action call: (vec at: i)
        set-i: i - 1
    ]
]

let: data = {
    { 1; 2; 3 }
    { 4; 5; }
    { 6; }
    { 7; }
}
print: data
data each: \v [print: v]
data each: \v [v each: \w [print: w]]
(data at: 0) at: 1 =: "a"
data at: 2 =: "b"
print: data

data append: "last elem"
print: data

let: other = { "more"; "data" }
let: [prefix extend: suffix] do: [
    suffix each: \v [prefix append: v]
]
print: other
data extend: other
print: data

#let: [length] do: [
#    mut: count = 0
#    self each: [ set-count: count + 1 ]
#    count
#]
print: data length

let: [vec map: f] do: [
    let: new-vec = {}
    vec each: \v [new-vec append: (f call: v)]
    new-vec
]
print: data
data each: [print]
print: (data map: [length])

let: [vec from: initial-value accumulate: f] do: [
    mut: cur = initial-value
    vec each: \v [set-cur: (f call*: (cur, v))]
    cur
]
print: ((data map: [length]) from: 0 accumulate: \sum-so-far current-value [
    sum-so-far + current-value
])

let: [vec map2: f] do: [
    vec from: {} accumulate: \new-vec x [
        new-vec append: (f call: x)
    ]
]
print: (data map2: [length])

let: [vec strsum] do: [
    vec from: "" accumulate: \a b [a ~ b >string]
]
({{"a";"b"};{"c";"d"}} map2: [strsum]) each: [print]

let: [vec select: filter] do: [
    vec from: {} accumulate: \new-vec x [
        if: (filter call: x) then: [ new-vec append: x ] else: new-vec
    ]
]
print: (data select: [it length < 2])
print: (data select: [it length >= 2])

let: [v print-with-wrapper: s] do: [
    print: s ~ v >string ~ s
]
data each: [print-with-wrapper: "!"]

# example of runtime error
#data each: [strsum]

let: [nonlocal-return-test: f] do: [
    print: "should get here"
    f call: 5
    print: "should not get here!"
]
print: \cc [nonlocal-return-test: cc] call/cc + 10

# If running this in a method, it will infinite loop on the first `cc call: ...`
# since in that case, the current continuation includes the `cc call:`, whereas
# when evaluating at the top level, the current continuation only goes to the end
# of the top-level sequence component, i.e. the `print: ...`.
mut: cc = null
print: "result is: " ~ [set-cc: it; null] call/cc >string
cc call: 5
cc call: 10

data: :Point has: { :x; :y }
let: p = (Point x: 5 y: 10)
print: p
print: p .x
print: p .y
p set-x: 6
print: p
p set-x: 5

p type
p type == Point
p Point?
p Number?
p String? Bool?

t type == Bool

data: :Point3D extends: { Point } has: { :z }

let: [(p: Point) +: (q: Point)] do: [
    Point x: (p .x + q .x) y: (p .y + q .y)
]

let: p3 = (Point3D x: 5 y: 10 z: 15)
let: q = (Point x: 3 y: 2)
let: q3 = (Point3D x: 3 y: 2 z: 1)
p + q
p + q3
p3 + q
p3 + q3

let: [(p: Point3D) +: (q: Point3D)] do: [
    Point3D x: (p .x + q .x) y: (p .y + q .y) z: (p .z + q .z)
]
p + q
p + q3
p3 + q
p3 + q3

let: [while-with-break: cond do: body] do: [
    \cc [
        while: cond do: [body call: cc]
    ] call/cc
]

mut: i = 0
while-with-break: [t] do: \break [
    print: i
    if: i == 5 then: [break call: "result of break"]
    set-i: i + 1
]

let: [while-with-break-and-continue: cond do: body] do: [
    \break-cc [
        while: cond do: [
            \cont-cc [
                body call*: break-cc, cont-cc
            ] call/cc
        ]
    ] call/cc
]

set-i: 0
while-with-break-and-continue: [t] do: \break continue [
    set-i: i + 1
    print: i
    if: i == 3 then: [continue call: "result of continue"]
    if: i == 5 then: [break call: "result of break"]
    print: "end of while loop body"
]

# Need to define these early.
data: :Condition has: { :message }
data: :InternalError extends: { Condition } has: {}
data: :UndefinedSlot extends: { Condition } has: {}
data: :AssertionFailure extends: { Condition } has: { :condition }
data: :SwitchFallThrough extends: { Condition } has: {}
data: :NoneValue extends: { Condition } has: {}
data: :OutOfRange extends: { Condition } has: { :collection; :index }
data: :NoSuchRestart extends: { Condition } has: { :restart }

# TODO: remove these. May need to add proper modules which have lookups resolved at the end.
defer-method: :signal:

let: [assert: condition] do: [
    if: not condition call then: [
        signal: (AssertionFailure message: "Assertion failed: " ~ condition >string condition: condition)
    ]
]

let: [receiver switch: (options: Vector)] do: [
    \ret [
        options each: \option [
            assert: [option length == 2]
            let: condition = (option at: 0)
            let: response = (option at: 1)
            if: (condition call: receiver) then: [ret call: (response call: receiver)]
        ]
        signal: (SwitchFallThrough message: "no switch conditions matched; fell through")
    ] call/rc
]

set-i: = 5
switch: {
    #{ [test]; [response]; :blah }
    { [(i / 2) * 2 == i]; [print: "i is even"] }
    { [i == 5]; [print: "i is 5"] }
    { t; [print: "i is odd and not 5"] }
}

[ print: "in body" ] cleanup: [ print: "in cleanup" ]
#[ print: "in body 2" ] cleanup: "shouldn't see this string!"
1234 cleanup: [ print: "cleaning up from 1234" ]

[
    let: result = \ret [
        print: "before return"
        1 + (ret call: "<the result>")
        print: "after return"
    ] call/rc
    print: "result: " ~ result >string
] call

let: [top: return] do: [
    print: "top, before return"
    1 + (return call: "<the result from top>")
    print: "top, after return (BAD)"
]
let: [middle: return] do: [
    print: "middle, before calling top"
    [top: return] cleanup: [
        print: "middle, doing cleanup"
    ]
    print: "middle, after calling top (BAD)"
]
let: [bottom: return] do: [
    print: "bottom, before calling middle"
    [middle: return] cleanup: [
        print: "bottom, doing cleanup"
    ]
    print: "bottom, after calling middle (BAD)"
]
print: \ret [bottom: ret] call/rc

[
    mut: rc-handle = null
    \rc [set-rc-handle: rc] call/rc
    print: rc-handle
    # This raises an error now.
    #print: (rc-handle call: 5)
    # TODO: hm, need to fix some syntax here. shouldn't need to put an expr at the end after a comment...
    1
] call

#\cc [cc call*: 1,2] call/cc

[
    \ret [
        [
            ret call: 1234
        ] cleanup: [ print: "first cleanup" ]
    ] call/rc
] cleanup: [
    print: "second cleanup"
]

let: [do-a-tail-cleanup] do: [ [ [ 1234 ] call ] cleanup: [ print: "other cleanup" ] ]
[ do-a-tail-cleanup ] cleanup: [ print: "some cleanup" ]

###################################################################

data: :Optional has: {
    :has-value?
    :value
}

let: [some: value] do: [ Optional has-value?: t value: value ]
let: [none]        do: [ Optional has-value?: f value: null ]

let: [(opt: Optional) then: some-body else: none-body] do: [
    if: opt .has-value? then: [
        some-body call: opt .value
    ] else: [
        none-body call
    ]
]

let: [(opt: Optional) value!] do: [
    opt then: [it] else: [signal: (NoneValue message: "none has no value")]
]

(some: 5) then: [print] else: [print: "none"]
none then: [print] else: [print: "none"]

# Sequences must have:
#   length
#   at:
mixin: :Sequence
let: [(seq: Sequence) each: (action: Quote)] do: [
    mut: i = 0
    while: [i < seq length] do: [
        action call: (seq at: i)
        set-i: i + 1
    ]
]

mix-in: Sequence to: Vector

let: [(opt: Optional) length] do: [ opt then: 1 else: 0 ]
let: [(opt: Optional) at: (i: Number)] do: [
    if: i == 0 then: [
        opt value!
    ] else: [
        signal: (OutOfRange message: ("index " ~ i >string ~ " out of range for optional") collection: opt index: i)
    ]
]
mix-in: Sequence to: Optional

{ 1; 2; 3 } each: [print]
(some: 123) each: [print]
none each: [print]


###################################################################


# Define assocs. (For now, these are just vectors of key/value pairs.)

data: :AssocEntry has: { :key; :value }

data: :Assoc has: { :entries }
let: [assoc: vector-entries] do: [
    Assoc entries: (vector-entries map: \entry [ AssocEntry key: (entry at: 0) value: (entry at: 1) ])
]

let: [(assoc: Assoc) each-entry: (action: Quote)] do: [ assoc .entries each: action ]

let: [(a: Assoc) if-has: key then*: then-fn else: else-fn] do: [
    \ret [
        a each-entry: [
            if: it .key == key then: [ret call: (then-fn call: it)]
        ]
        else-fn call
    ] call/rc
]

let: [(a: Assoc) if-has: key then: then-fn else: else-fn] do: [
    a if-has: key then*: [then-fn call: it .value] else: else-fn
]

let: [(a: Assoc) at*: key] do: [
    a if-has: key then: [some: it] else: [none]
]

let: [(a: Assoc) at: key] do: [ (a at*: key) value! ]

let: [(a: Assoc) has: key] do: [ (a at*: key) .has-value?  ]

let: [(a: Assoc) put-entry: (entry: AssocEntry)] do: [
    a if-has: entry .key then*: [ it set-value: entry .value ] else: [
        a .entries append: entry
    ]
]
let: [(a: Assoc) at: key put: value] do: [
    a put-entry: (AssocEntry key: key value: value)
]

# Add all pairs from :b into :a, keeping the value from :a if there is a conflict.
let: [(a: Assoc) extend: (b: Assoc)] do: [
    b each-entry: \entry [
        a if-has: entry .key then: null else: [a put-entry: entry]
    ]
]

let: [(a: Assoc) keys] do: [
    let: keys-vec = {}
    a each-entry: \entry [ keys-vec append: entry .key ]
    keys-vec
]

let: m = (assoc: { { 1; "one" }; { 2; "two" } })
m
m has: 1
m has: 2
m has: 3
m at*: 1
m at*: 3
m at: 1
m at: 2 put: "duo"
m at: 2
m at: 3 put: "three"
m


###################################################################

# TODO: remove these. May need to add proper modules which have lookups resolved at the end.
defer-method: :get:

let: namestack = { assoc: {} }
let: [push-scope: (vars: Assoc)] do: [namestack append: vars]
let: [pop-scope] do: [namestack pop]
let: [scope has-var: (var: Symbol)] do: [ scope has: var ]
let: [scope get-var: (var: Symbol)] do: [ scope get: var ]
let: [scope set: (var: Symbol) value: value] do: [ scope at: var put: value ]
let: [(name: Symbol) get] do: [
    \ret [
        namestack each-reversed: \scope [
            scope if-has: name then: [ret call: it] else: none
        ]
    ] call/rc
]
let: [(name: Symbol) set: value] do: [(namestack at: (namestack length - 1)) at: name put: value ]
let: [with-scope: (body: Quote)] do: [
    push-scope: (assoc: {})
    body cleanup: [pop-scope]
]

###################################################################

:x set: 1
print: :x get
with-scope: [
    print: :x get
    :x set: 2
    print: :x get
]
print: :x get

###################################################################

# Stack of list-of-pairs, where each pair holds a predicate quote
# and a handler quote.
let: handler-stack = {}
let: [(body: Quote) with-handlers: (handlers: Vector)] do: [
    handler-stack append: handlers
    body cleanup: [handler-stack pop]
]

let: [(predicate: Quote) matches-condition?: condition] do: [ predicate call: condition ]
let: [(type: Type) matches-condition?: condition] do: [ condition is-instance: type ]
let: [value matches-condition?: condition] do: [ condition == value ]

# Call a handler if one matches; else return null.
let: [(handlers: Vector) call-handler*: condition] do: [
    \ret [
        handlers each: [
            let: predicate = (it at: 0)
            let: handler = (it at: 1)
            if: (predicate matches-condition?: condition) then: [ret call: (handler call: condition)]
        ]
        null
    ] call/rc
]

# Stack of assocs (from symbol to restart quote).
let: restart-stack = {}
let: [(body: Quote) with-restarts: (restarts: Assoc)] do: [
    restart-stack append: restarts
    body cleanup: [restart-stack pop]
]

let: [(restart: Symbol) get-restart] do: [
    \ret [
        restart-stack each-reversed: [
            it if-has: restart then: \quote [ret call: quote] else: null
        ]
        signal: (NoSuchRestart message: ("restart " ~ restart >string ~ " not found") restart: restart)
    ] call/rc
]

let: [(restart: Symbol) invoke-restart] do: [
    restart get-restart call
]

let: [all-active-restarts] do: [
    let: restarts = (assoc: {})
    restart-stack each-reversed: [restarts extend: it]
    restarts
]

let: [signal: condition] do: [
    \ret [
        handler-stack each-reversed: [
            if: not (let: handler-result = (it call-handler*: condition)) Null? then: [
                ret call: handler-result
            ]
        ]
        # No handlers resolved the condition. Ask the user if they want to select a restart instead.
        let: restarts = all-active-restarts
        let: restart-keys = restarts keys
        let: idx = (query-user-for-restart: restart-keys condition: condition)
        if: idx Number? then: [
            let: selected-restart = (restart-keys at: idx)
            ret call: (selected-restart invoke-restart)
        ]
        # User didn't select any of the restarts; fall back to a panic.
        panic!: condition
    ] call/rc
]

# Handle a signal from the VM.
# TODO: have VM just produce actual Condition (or subtype thereof) objects.
let: [tup condition-tuple>object] do: [
    \condition message [
        condition switch: {
            { [it == :internal-error]; [InternalError message: message] }
            { [it == :undefined-slot]; [UndefinedSlot message: message] }
            { t;                       [Condition message: message] }
        }
    ] call*: tup
]
let: [handle-signal: condition-tuple] do: [ signal: condition-tuple condition-tuple>object ]

# Catches eval_toplevel issue with exit condition.
#print: ("a" plus: "b")

# Same, but with restarts so we can continue.
[ ("a" plus: "b") + 3 ] with-restarts: (assoc: {
    { :use-5; [ 5 ] }
})

#[
#    [ blah ] with-restarts: (assoc: {
#        { :use-10; [ 10 ] }
#    })
#] with-handlers: {
#    {
#        UndefinedSlot; \condition [
#            print: "got an UndefinedSlot:: " ~ condition >string
#            print: "invoking :use-10 restart!"
#            :use-10 invoke-restart
#        ]
#    }
#}

[
    [ 1 / 0 ] with-restarts: (assoc: {
        { :use-0; [ 0 ] }
        { :use-10; [ 10 ] }
        { :signal-assertion-failure; [ assert: f ] }
    })
] with-handlers: {
    {
        InternalError; \condition [
            print: "got an InternalError:: " ~ condition >string
            print: "invoking :use-15 restart, which does not exist!"
            :use-15 invoke-restart
        ]
    }
    {
        AssertionFailure; \condition [
            print: "got an AssertionFailure:: " ~ condition >string
            print: "using a value of 20"
            20
        ]
    }
}

# This is a bit unfortunate. Delete `it`? Or just provide `it` to _every_ no-arg quote?
[it print] call: "a string"
[[it print] call] with-restarts: (assoc: {
    { :use-null; [ null ] }
})
