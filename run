#!/bin/bash

set -e

# Debug/Release
CMAKE_GEN_FLAGS="-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=Debug"
CMAKE_BUILD_FLAGS=""

format ()
{
    echo "================== FORMATTING =================="
    clang-format -i $(find vm/ -name "*.cc" -or -name "*.h")
}

build ()
{
    echo "================== BUILDING =================="
    cmake $CMAKE_GEN_FLAGS -S . -B out
    cmake $CMAKE_BUILD_FLAGS --build out
}

# test_source <module.name> <path/to/source.katsu>
test_source ()
{
    module_name="$1"
    source="$2"
    expected_stdin="${source%.katsu}.stdin"
    expected_stdout="${source%.katsu}.stdout"
    expected_stderr="${source%.katsu}.stderr"
    expected_exitcode="${source%.katsu}.exitcode"
    if [ -f "$expected_stdin" ]; then
        stdin="$expected_stdin"
    else
        stdin="/dev/null"
    fi
    stdout=$(mktemp --tmpdir "test-source-stdout.XXXXXXXXXXX")
    stderr=$(mktemp --tmpdir "test-source-stderr.XXXXXXXXXXX")
    exitcode=$(mktemp --tmpdir "test-source-exitcode.XXXXXXXXXXX")

    echo "===== testing source: $source ====="
    exit_code=0
    echo out/katsu "$module_name" "$source" <$stdin >$stdout 2>$stderr
    out/katsu "$module_name" "$source" <$stdin >$stdout 2>$stderr || exit_code=$?
    echo $exit_code > $exitcode

    # Check stdout if an expected output is provided.
    if [ -f "$expected_stdout" ]; then
        if ! cmp -s "$expected_stdout" "$stdout"; then
            echo "stdout diff from expected:"
            git --no-pager diff --no-index "$expected_stdout" "$stdout"
        fi
    fi
    # Check stderr whether an expected output is provided or not; if not provided, assume there
    # should be no stderr emitted.
    if [ -f "$expected_stderr" ]; then
        if ! cmp -s "$expected_stderr" "$stderr"; then
            echo "stderr diff from expected:"
            git --no-pager diff --no-index "$expected_stderr" "$stderr"
        fi
    elif [ -s "$stderr" ]; then
        echo "expected no stderr, got:"
        cat "$stderr"
        return 1
    fi
    # Check exitcode whether an expected output is provided or not; if not provided, assume the
    # exit code should be 0.
    if [ -f "$expected_exitcode" ]; then
        if ! cmp -s "$expected_exitcode" "$exitcode"; then
            echo "exitcode diff from expected:"
            git --no-pager diff --no-index "$expected_exitcode" "$exitcode"
        fi
    elif [ $exit_code -ne 0 ]; then
        echo "expected exit-code 0, got: $exit_code"
        return 1
    fi
    echo "Test passed"
}

test ()
{
    echo "================== TESTING =================="
    out/test $@

    for f in $(find test/ -name "*.katsu"); do
        test_source test $f
    done
}

_valgrind ()
{
    echo "================== VALGRIND =================="
    # TODO: need to build without asan...
    valgrind -s --leak-check=full --error-exitcode=2 out/katsu $@
}

katsu ()
{
    echo "================== RUNNING =================="
    out/katsu $@
}

if [ $# -eq 0 ]; then
    build
    test
    _valgrind
    katsu
    exit 0
fi

case "$1" in
    f|format)       shift; format ;;
    b|build)        shift; build ;;
    t|test)         shift; build; test $@ ;;
    v|valgrind)     shift; build; _valgrind $@ ;;
    k|katsu|r|run)  shift; build; katsu $@ ;;
    "")                    build; katsu ;;
    *)
        echo "not sure what to do with '$1'" >&2
        exit 1 ;;
esac
