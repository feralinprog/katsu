use: {
    "core.builtin.ffi"
    "core.ffi"
    "core.resource"
}

with-disposal: [
    let: libc = (dlopen: "libc.so.6" flags: RTLD_LAZY) ^dispose

    # int puts(const char*)
    let: &puts = (libc dlsym: "puts")

    let: cif = (malloc: sizeof-ffi_cif) ^dispose
    let: atypes = (malloc-foreign-array: { &ffi_type_pointer }) ^dispose
    let: prep-result = (ffi-prep-cif: cif abi: ffi_abi.FFI_DEFAULT_ABI nargs: 1 rtype: &ffi_type_sint atypes: atypes) ^dispose
    assert: prep-result = ffi_status.FFI_OK

    let: s = "hello, world! -sent from my FFI"
    let: arg = s >c-string ^dispose
    let: argp = (malloc: 8 aligned: 8) ^dispose # TODO: correct alignment? maybe need to pull this from the `cif`
    argp foreign-write-foreign-at-offset: 0 value: arg
    let: avalues = (malloc-foreign-array: { argp }) ^dispose
    let: rvalue = (malloc: sizeof-ffi_arg aligned: 4) ^dispose # TODO: correct alignment? maybe need to pull this from the `cif`

    ffi-call: cif fn: &puts rvalue: rvalue avalues: avalues
    let: result = (rvalue foreign-read-s32-at-offset: 0)
    assert: result = (s length + 1)
]
