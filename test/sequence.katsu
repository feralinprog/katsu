use: {
    "core.builtin.misc"
    "core.combinator"
    "core.sequence"
}

let: (seq: Sequence) pprint-all do: [
    print: "length = " ~ seq length >string
    seq each: [ pretty-print: it ]
]

{ 1; 2; 3 } pprint-all
{ 1; 2; 3 } reversed pprint-all
({ 0; 1; 2; 3; 4; 5 } from: 2 to<: 5) pprint-all
({ 0; 1; 2; 3; 4; 5 } from: 1 to<: 4) reversed pprint-all
({ 0; 1; 2; 3; 4; 5 } from: 2 to=: 5) pprint-all

{ "a"; "b"; "c" } each/index: \i x [
    print: i >string ~ " -> " ~ x
]

(3 to<: 6) pprint-all
(3 to=: 6) pprint-all
(6 to=: 3) pprint-all

({ "a"; "b"; "c"; "d"; "e"; "f" } at: { 4; 2; 1; 5 }) pprint-all

do: [
    let: v = { 1; 2; 3; 4 }
    let: s = (v from: 1 to=: 2)
    assert: (s instance?: MutableSlice)
    s at: 1 put: "c"
    pretty-print: v
]

# `each:` should produce #null
pretty-print: ({ 1; 2; 3 } each: [ it * 10 ])

{ "a"; "b"; "c" } each/index: \i x [
    print: i >string ~ " -> " ~ x
]

pretty-print: ({ "abc"; "a"; "shouldn't print this!" } all?: [
    print: it
    length > 1
])

pretty-print: ({ "abc"; "a"; "shouldn't print this!" } any?: [
    print: it
    length = 1
])

pretty-print: ({ "ab"; "cd"; "ef" } contains?: "a")
pretty-print: ({ "ab"; "cd"; "ef" } contains?: "cd")
pretty-print: ({ "ab"; "cd"; "ef" } contains?: "cd" starting-at: 1)
pretty-print: ({ "ab"; "cd"; "ef" } contains?: "cd" starting-at: 2)

pretty-print: (
    { "abc"; "ab"; "a" } first: [
        print: it
        length
    ] where: [ it = 2 ] else: "nope"
)
pretty-print: (
    { "abc"; "ab"; "cd" } first: [
        print: it
        length
    ] where: [ it = 1 ] else: "nope"
)

do: [
    let: v = {}
    v append: "a"
    v append: "b"
    v append: "c"
    pretty-print: v

    let: w = { "d"; "e" }
    pretty-print: (v concat: w)
    pretty-print: v
    pretty-print: w
]

pretty-print: ({ 1; 2 } concat: { 3; 4 } like: {} vector>array)

do: [
    let: v = { "a"; "b"; "c"; "d"; "e"; "f" }
    v unsafe-copy: (v from: 2 to<: 5) at: 1
    pretty-print: v
]

do: [
    let: v = { 1; 2; 3 }
    v extend: { "a"; "b"; "c" }
    pretty-print: v
]


pretty-print: ({ "abcd"; "abcde" } map: [ length ] like: {} vector>array)

pretty-print: ({ "abc"; "abcde"; "abcd"; "def" } keep: [ length > 3 ])
pretty-print: ({ "abc"; "abcde"; "abcd"; "def" } reject: [ length > 3 ])

pretty-print: ({ "abc"; "def"; "ghi" } reduce: \a b [ a ~ b ] initial: "")

pretty-print: { 10; 30; 20 } min
pretty-print: { 10; 30; 20 } max

do: [
    let: v = { 1; 2; 3; 4 }
    v remove-first
    pretty-print: v
]

do: [
    mut: v = {}
    mut: i = 0
    v until: [length = 5] do: [
        pretty-print: it
        append: i
        i: i + 1
    ]
]

do: [
    let: b = 0 zeros-byte-array
    assert: not (b instance?: ResizableSequence)
    let: v = (resizable-like: b capacity: 2)
    pretty-print: v length
    v length: 3
    pretty-print: v length
    pretty-print: (v at: 0)
    pretty-print: (v at: 1)
    pretty-print: (v at: 2)
    pretty-print: (v at: 4 put: 123)
    pretty-print: v length
    pretty-print: (v at: 0)
    pretty-print: (v at: 1)
    pretty-print: (v at: 2)
    pretty-print: (v at: 3)
    pretty-print: (v at: 4)
]

do: [
    let: v = { 1; 5; 2; 4; 3 }
    v keep!: [ it > 2 ]
    v pprint-all
]

do: [
    let: v = { 1; 5; 2; 4; 3 }
    v reject!: [ it > 2 ]
    v pprint-all
]
