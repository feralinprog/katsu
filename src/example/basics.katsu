use: "core.builtin.extra"
use: "core/optional.katsu"

pretty-print: 10 + 20

let: (adder: (n0: Fixnum)) do: [
    mut: n = n0
    let: delta = n0 + 30
    \x [
        let: new-n = n + delta + x
        n: new-n
        n
    ]
]

let: a = (adder: 3)
pretty-print: a
pretty-print: (a call: 0) # 3 + 33 + 0 = 36
pretty-print: (a call: 2) # 36 + 33 + 2 = 71

pretty-print: 5 type
pretty-print: a type
a instance?: Fixnum
a instance?: Closure

print: "this is " ~ "a test"

let: run-test do: [
    mut: n = 10000
    while: [n > 0] do: [
        if: (n / 10000) * 10000 = n then: [
            pretty-print: n
        ]
        n: n - 1
    ]
]
run-test

data: Point has: { x; y }
data: Point3D extends: { Point } has: { z }
let: p = (Point3D x: 1 y: 2 z: 3)
p .x
p .y
p .z
(p x: 5; null)
(p y: 6; null)
(p z: 7; null)
p .x
p .y
p .z

p Point?
p Point3D?

(Point x: 1 y: 2) Point3D?

(some: 5) then: [pretty-print: it] else: [print: "none"]
none then: [pretty-print: it] else: [print: "none"]

pretty-print: {1; 2; 3}

5 times: [pretty-print: it]

let: v = {1;2;3;4}
v length
pretty-print: v
v unsafe-write-value-at-offset: 2 value: "I swappa the arrey"
pretty-print: v

let: (f: n) do: [
    get-call-stack
]
let: (g: n) do: [
    f: n
]
let: (h: n) do: [
    g: n
]
let: s = (h: 0)

pretty-print: s length
let: fm = (Frame segment: s offset: 0)
print: "MODULE FRAME:"
pretty-print: fm .code
pretty-print: fm .inst-spot
pretty-print: fm .#regs
pretty-print: fm .#data
pretty-print: fm .data-depth
#pretty-print: fm .module

let: fh = fm next
print: "'h' FRAME:"
pretty-print: fh .code
pretty-print: fh .inst-spot
pretty-print: fh .#regs
pretty-print: fh .#data
pretty-print: fh .data-depth
#pretty-print: fm .module

let: fg = fh next
print: "'g' FRAME:"
pretty-print: fg .code
pretty-print: fg .inst-spot
pretty-print: fg .#regs
pretty-print: fg .#data
pretty-print: fg .data-depth
#pretty-print: fm .module

let: ff = fg next
print: "'f' FRAME:"
pretty-print: ff .code
pretty-print: ff .inst-spot
pretty-print: ff .#regs
pretty-print: ff .#data
pretty-print: ff .data-depth
#pretty-print: fm .module

let: c = ff .code
print: "'f' CODE:"
pretty-print: c .module type
pretty-print: c .#params
pretty-print: c .#regs
pretty-print: c .#data
pretty-print: c .upreg-map
pretty-print: c .insts
pretty-print: c .args
pretty-print: c .span
pretty-print: c .inst-spans

let: tup = (1, 2, 3)
pretty-print: tup length
pretty-print: (tup unsafe-at: 0)
pretty-print: (tup unsafe-at: 1)
pretty-print: (tup unsafe-at: 2)

print: "----------------------------------"

print: "aaaaa"
[
    print: "  bbbbb"
    let: input = (\k [
        print: "    ccccc"
        print: "    result of k('abcdef'): " ~ (k call: "abcdef")
        print: "    result of k('123456'): " ~ (k call: "123456")
        print: "    ddddd"
    ] call/dc: t)
    print: "  eeeee"
    # Pretend to do some calculations, and return the result:
    "calcs(" ~ input ~ ")"
] call/marked: t
print: "zzzzz"

print: "----------------------------------"

print: (\return [
    print: "doing some things"
    return call: "early return"
    print: "oops, after return!"
] with-return)

print: "----------------------------------"

print: (\r [
    print: "doing some setup"
    [
        print: "doing some calcs"
        r call: "return value here"
        print: "after early return - shouldn't see this at all"
    ] finally: [
        print: "cleaning up!"
    ]
    print: "after cleanup - also shouldn't see this, since early return should still be active"
] with-return)

let: n do-test do: [
    TAIL-CALL: (n = 0 then: [ () >string ] else: [
        (n - 1) do-test
    ])
]

try: [
    5 do-test
] except: {
    (Condition, \cond [
        assert: cond .condition = "no-matching-method"
    ])
}

try: [
    print: "before signal"
    (Condition condition: "a condition" message: "I'm a signal!" stack: null) signal
    print: "after signal"
] except: {
    (Condition, \c [ print: "Got signal: " ~ c .condition ~ " - " ~ c .message; c .stack print-trace-except-top ])
}

let: divide-by-zero do: [
    1 / 0
]
try: [
    divide-by-zero
] except: {
    (Condition, \cond [
        assert: cond .condition = "divide-by-zero"
    ])
}

pretty-print: ({ 1; 2; 3 } contains?: 1)
pretty-print: ({ 1; 2; 3 } contains?: 2)
pretty-print: ({ 1; 2; 3 } contains?: 3)
pretty-print: ({ 1; 2; 3 } contains?: 4)

do: [
    let: a = make-empty-assoc
    pretty-print: a
    pretty-print: a length
    pretty-print: a backing-array
    a add: "key" value: "value"
    pretty-print: a
]

do: [
    let: v = { 1; 2; 3 }
    pretty-print: v
    v append: 4
    pretty-print: v
    pretty-print: v pop
    pretty-print: v
    v append: 4
    pretty-print: v
    pretty-print: v pop
    pretty-print: v
]

do: [
    let: v = { 1; 2; 3 }
    let: a = v backing-array
    pretty-print: v
    pretty-print: a
    pretty-print: (a unsafe-at: 0)
    pretty-print: (a unsafe-at: 1)
    pretty-print: (a unsafe-at: 2)
]

do: [
    let: a = make-empty-assoc
    a add: "key1" value: "value1"
    a add: "key2" value: "value2"
    a each-key: [print: it]
]

print: "just before using imports-test.katsu"
use: "example/imports-test.katsu"
print: "just after using imports-test.katsu"
pretty-print: exported-value

print: "just before using imports-test.katsu x2"
use: "example/imports-test.katsu"
print: "just after using imports-test.katsu x2"
pretty-print: exported-value
