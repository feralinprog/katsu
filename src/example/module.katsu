module: M has: [
    # all multimethods must be at module top level; cannot be nested
    let: (test: (a: String)) do: [ print: a ]
    # methods can use other methods (and types) that are defined later
    # but can only use variables / constants that were previously defined (e.g. TOP_LEVEL_VAR is unusable here,
    # as otherwise there could be a loop between TOP_LEVEL_VAR definition invoking test: while test: uses TOP_LEVEL_VAR)
    let: (test: (n: Int)) do: [ a * 2 ]
    let: (do-thing-with: a) do: [ print: "doesn't actually do anything with a" ]

    # constants / variables cannot be used out-of-order, but definitions can use any types / methods in the module,
    # even if out of order. (TODO: actually, what if `later-test:` uses TOP_LEVEL_VAR..? still broken.)
    # e.g. this cannot use TOP_LEVEL_VAR_2, but can use later-test:
    let: TOP_LEVEL_VAR = 5 - (later-test: 2)
    let: TOP_LEVEL_VAR_2 = 10 + TOP_LEVEL_VAR
    print: "calculated variables!"

    let: (later-test: (n: Int)) do: [ (n + 2) pr ]

    # can use OutOfOrder!
    let: ((self: OutOfOrder) whatever) do: [
        # cannot define any multimethods in here
        # (... or maybe allow multimethod definitions, but like `local: [sig] does: [ thing ]` to make it clear the semantics
        # are different; it would shadow whatever multimethod definition was in use and entirely replace all the individual
        # methods.)
        # but _can_ define types, and use variables / constants.
        # nothing can be used out-of-order. (maybe types _could_ be, but why..? seems like that would only be
        # confusing, with no real reason to allow it.)

        # can't use Hidden right here
        struct: Hidden has: { :a; :b }
        # now Hidden is available
        Hidden a: 5 b: 10

        let: x = 5
        # redefinition is ok for constants, not for variables
        let: x = x + 5 # now 10; new binding
        mut: y = 5
        set-y: y + 3 # set-* instead of rebinding

        if: x > y then: [
            # z's scope is only the current block
            let: z = 10
            print: z
            ^ z # method:does: should automatically set up a return-continuation, which ^ calls
        ]
        # z is out of scope here
    ]

    struct: OutOfOrder has: { :x }

    # effectively, all types / methods are declared implicitly at the top of the module, but then all top-level statements
    # or expressions are evaluated in order.
    # in other words:
    # - scan top-level to find all method and type definitions
    # - start a new scope, add all the method and type definitions
    # - now process all top-level expressions in order, adding to scope as appropriate (e.g. `let:` adds to scope for following expressions)
    #   and also process method bodies
]

# loading the module M will do:
# * calculate TOP_LEVEL_VAR = 1 (and print out '4')
# * calculate TOP_LEVEL_VAR_2 = 11
# * print out 'calculated variables!'
# * add all the multimethod definitions to the global multimethod storage (checking for collisions)
# * produce a record/dict of some sort with:
#   - TOP_LEVEL_VAR -> 1
#   - TOP_LEVEL_VAR_2 -> 11
#   - OutOfOrder -> the dataclass type