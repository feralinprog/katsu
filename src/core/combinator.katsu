use: {
    "core.dynamic-variable"
}

data: ReturnMarker has: {}
let: f with-return-callable do: [
    let: marker = ReturnMarker new
    let: result = (shift: [
        OkUnwinding value: (f call: \return-value [
            reset: (ReturnUnwinding marker: marker return-value: return-value)
        ])
    ])
    assert: (result instance?: Unwinding)
    result on-ok: [ result .value ] on-condition: [
        # Re-raise any conditions.
        reset: result
    ] on-return: [
        # If it's _our_ return, then stop here; else keep unwinding.
        if: (result .marker id=: marker) then: [
            result .return-value
        ] else: [
            reset: result
        ]
    ]
]

let: return-callable = (make-dynamic: "return")
let: (x with-return: f) do: [
    \ret [
        return-callable with-value: ret do: [
            f call: x
        ]
    ] with-return-callable
]
let: (return: x) do: [
    return-callable get call: x
]
let: (x return-if: (b: Bool)) do: [
    if: b then: [ return: x ]
]

let: ((n: Fixnum) times: body) do: [
    mut: i = 0
    while: [i < n] do: [
        body call: i
        i: i + 1
    ]
]

let: (x do: f) do: [f call: x]

let: (x if-not-null: body) do: [
    if: x != #null then: [ body call: x ]
]
