IMPORT-EXISTING-MODULE: "core.builtin.misc"

# This file is essentially a minimum amount of code to get to the point where we can define `use:`
# and start loading other modules.

let: (if: (cond: Bool) then: tbody) do: [
    # TODO: `if:then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: (if: cond then: tbody else: #null)
]

let: (_it while: (cond: Closure) do: (body: Closure)) do: [
    # TODO: `if:then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: (if: (cond call: _it) then: [
        body call: _it
        TAIL-CALL: (while: cond do: body)
    ] else: #null)
]

data: Condition has: { condition; message; stack }
data: AssertionFailed extends: { Condition } has: {}
# TODO: subtypes instead of condition field, and have core.condition convert from raw inputs from VM into Condition objects

data: Unwinding has: {}
data: OkUnwinding extends: { Unwinding } has: { value }
data: ConditionUnwinding extends: { Unwinding } has: {
    cond # TODO: should be Condition
}
data: ReturnUnwinding extends: { Unwinding } has: { marker; return-value }

let: ((u: OkUnwinding) on-ok: ok-handler on-condition: condition-handler on-return: return-handler) do: [
    ok-handler call: u
]
let: ((u: ConditionUnwinding) on-ok: ok-handler on-condition: condition-handler on-return: return-handler) do: [
    condition-handler call: u
]
let: ((u: ReturnUnwinding) on-ok: ok-handler on-condition: condition-handler on-return: return-handler) do: [
    return-handler call: u
]

let: *default-mark* = 0
let: (shift: f) do: [ f call/marked: *default-mark* ]
let: (reset: f) do: [ f call/dc:     *default-mark* ]

let: (c: Condition) signal/no-trace do: [
    reset: [ConditionUnwinding cond: c]
]
let: (c: Condition) signal do: [
    c stack: get-call-stack
    c signal/no-trace
]

let: (assert: (b: Bool)) do: [
    if: not b then: [
        (AssertionFailed condition: "assertion-failure" message: "an assertion failed" stack: #null) signal
    ]
]

# Add a ~ prefix to various collections-related methods to not conflict with other core modules such as core.sequence.
# We'll reimplement these methods in other modules, in a cleaner way.
# Anything here is meant to be shortest path to `use:`.

let: (v: Vector) ~length do: [
    v unsafe-read-u64-at-offset: 8
]
let: (v: Vector) ~backing-array do: [
    v unsafe-read-value-at-offset: 16
]
let: ((v: Vector) ~unsafe-at: (i: Fixnum)) do: [
    v ~backing-array ~unsafe-at: i
]

data: ~StopIteration has: { value }
let: ((v: Vector) ~each: f) do: [
    mut: i = 0
    mut: last = #null
    while: [i < v ~length and not (last instance?: ~StopIteration)] do: [
        last: (f call: (v ~unsafe-at: i))
        i: i + 1
    ]
    if: (last instance?: ~StopIteration) then: [ last .value ] else: [ last ]
]

let: ((v: Vector) ~contains?: x) do: [
    v ~each: [ if: (it = x) then: [ ~StopIteration value: #t ] else: #f ]
]

let: ((v: Vector) ~push: x) do: [ v append: x ]
let: (v: Vector) ~pop do: [
    assert: v ~length > 0
    let: new-length = v ~length - 1
    let: end = (v ~unsafe-at: new-length)
    v unsafe-write-u64-at-offset: 8 value: new-length
    end
]
let: (v: Vector) ~peek do: [
    assert: v ~length > 0
    v ~unsafe-at: (v ~length - 1)
]
let: (v: Vector) ~empty? do: [
    v ~length = 0
]

let: ((a: Assoc) ~length) do: [
    a unsafe-read-u64-at-offset: 8
]
let: ((a: Assoc) ~backing-array) do: [
    a unsafe-read-value-at-offset: 16
]

let: ((a: Array) ~unsafe-at: (i: Fixnum)) do: [
    a unsafe-read-value-at-offset: 16 + 8 * i
]

let: ((a: Assoc) ~each-entry: f) do: [
    mut: i = 0
    mut: last = #null
    while: [i < a ~length and not (last instance?: ~StopIteration)] do: [
        last: (f call*: (a ~backing-array ~unsafe-at: i * 2), (a ~backing-array ~unsafe-at: i * 2 + 1))
        i: i + 1
    ]
    if: (last instance?: ~StopIteration) then: [ last .value ] else: [ last ]
]
let: ((a: Assoc) ~at*: key) do: [
    a ~each-entry: \k v [ if: (k = key) then: [ ~StopIteration value: v ] else: #null ]
]
let: ((a: Assoc) ~each-key: f) do: [
    mut: i = 0
    mut: last = #null
    while: [i < a ~length and not (last instance?: ~StopIteration)] do: [
        last: (f call: (a ~backing-array ~unsafe-at: i * 2))
        i: i + 1
    ]
    if: (last instance?: ~StopIteration) then: [ last .value ] else: [ last ]
]
let: ((a: Assoc) ~contains?: k) do: [
    a ~each-key: [ if: (it = k) then: [ ~StopIteration value: #t ] else: #f ]
]

let: (t: Tuple) ~length do: [
    t unsafe-read-u64-at-offset: 8
]
let: ((t: Tuple) ~unsafe-at: (i: Fixnum)) do: [
    t unsafe-read-value-at-offset: 16 + 8 * i
]

# handlers should be a vector of (type <= Condition, handler) pairs.
# TODO: improve the error handling here.
let: (try: body except: handlers) do: [
    let: result = (shift: [ OkUnwinding value: (body call) ])
    assert: (result instance?: Unwinding)
    result on-ok: [ result .value ] on-condition: [
        let: cond = result .cond
        # Search through handlers for a handler matching this condition;
        # else re-raise the signal.
        mut: handled = #f
        let: handler-result = (handlers ~each: \h [
            let: handler-type = (h ~unsafe-at: 0)
            let: handler-fn = (h ~unsafe-at: 1)
            if: (cond instance?: handler-type) then: [
                handled: #t
                ~StopIteration value: (handler-fn call: cond)
            ]
        ])
        if: handled then: [ handler-result ] else: [ cond signal/no-trace ]
    ] on-return: [
        # Continue returning.
        reset: result
    ]
]

let: (body finally: recover) do: [
    let: result = (shift: [ OkUnwinding value: (body call) ])
    recover call
    assert: (result instance?: Unwinding)
    # Re-reset down to the next shift for conditions or returns.
    result on-ok: [ result .value ] on-condition: [
        reset: result
    ] on-return: [
        reset: result
    ]
]

let: (ensure: p? by: a else: default) do: [
    if: (p? call) then: [
        default call
    ] else: [
        let: result = a call
        assert: (p? call)
        result
    ]
]
let: (ensure: p? by: a) do: [ ensure: p? by: a else: [#null] ]

let: (s: String) ~length do: [ s unsafe-read-u64-at-offset: 8 ]
let: (find-module-file-path: (module-name: String)) do: [
    # TODO: do something more reasonable than this
    let: path = module-name ~ ""
    # Replace all '.' with '/'.
    mut: i = 0
    while: [i < path ~length] do: [
        let: offset = 16 + i
        if: (path unsafe-read-u8-at-offset: offset) = 46 then: [
            path unsafe-write-u8-at-offset: offset value: 47
        ]
        i: i + 1
    ]

    "src/" ~ path ~ ".katsu"
]

let: ((module: Assoc) run-file: (path: String) contents: (contents: String) imports: (imports: Vector)) do: [
    let: run-context = (make-run-context-for-path: path contents: contents)
    [
        mut: code = #null
        mut: result = #null
        while: [code: (run-context parse-and-compile-in-module: module imports: imports); code != #null] do: [
            result: code call
        ]
        result
    ] finally: [ run-context free-run-context ]
]

# Note: keep this in sync with C++ `use_default_imports`.
let: *default-imports* = {
    "core.builtin.default"
    "core"
}

# 1. find the right file path
# 2. read the file contents
# 3. create an empty module
# 4. use a cursor in order to:
#     * ask C++ to parse and convert to Code (eventually should be in-language instead!)
#     * then call the Code from here to add to that new module
#     * and move to next spot in source
# 5. add the new module to VM modules assoc
# 6. use-existing-module
#
# Also add a stack of in-progress use: invocations to detect recursive imports.
let: use-stack = {}
let: imports-stack = {}
data: RecursiveUse extends: { Condition } has: { module-name }
let: (use: (module-name: String) path-loader: get-path contents-loader: get-contents) do: [
    if: (use-stack ~contains?: module-name) then: [
        (RecursiveUse condition: "recursive-use" message: (
            "recursive `use:` starting from " ~ module-name
        ) stack: #null module-name: module-name) signal
    ] else: [
        let: module-result = (ensure: [loaded-modules ~contains?: module-name] by: [
            let: path = get-path call
            let: contents = (get-contents call: path)

            let: new-module = make-empty-assoc
            # TODO: just use a `map` instead on *default-imports*. Need to define standard collections methods...
            let: imports = {}
            *default-imports* ~each: [
                imports append: (loaded-modules ~at*: it)
            ]

            loaded-modules add: module-name value: new-module
            [
                use-stack ~push: module-name
                imports-stack ~push: imports
                new-module run-file: path contents: contents imports: imports
            ] finally: [
                use-stack ~pop
                imports-stack ~pop
            ]
        ])

        # If the imports-stack is empty, the current module is loaded using the C++ loader,
        # and it will need to use IMPORT-EXISTING-MODULE instead.
        if: not imports-stack ~empty? then: [
            let: new-module = (loaded-modules ~at*: module-name)
            let: imports = imports-stack ~peek
            if: not (imports ~contains?: new-module) then: [
                imports append: new-module
            ]
        ]

        module-result
    ]
]

let: (use: (module-name: String)) do: [
    use: module-name path-loader: [
        find-module-file-path: module-name
    ] contents-loader: \path [
        read-file: path
    ]
]
let: (use: (module-names: Vector)) do: [
    module-names ~each: [use: it]
]

# Define the native->in-language condition handler in a separate module, as otherwise test code
# runs into issues trying to define their own handlers (since 'core' is always imported).
# TODO: ideally this would just be a private module under core.
use: "core.condition-handler"

let: (s: String) >string do: [ s ]
let: (_: Null) >string do: [ "#null" ]
let: (b: Bool) >string do: [ if: b then: "#t" else: "#f" ]

let: digit-strings = ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
let: (n: Fixnum) digit>string do: [
    digit-strings ~unsafe-at: n
]

let: ((a: Fixnum) mod: (n: Fixnum)) do: [ a - (a / n) * n ]

let: (n: Fixnum) >string do: [
    if: n < 0 then: ["-" ~ (- n) >string] else: [
        if: n < 10 then: [n digit>string] else: [
            (n / 10) >string ~ (n mod: 10) digit>string
        ]
    ]
]

let: v pr do: [
    print: v >string
    v
]

use: "core.stack-trace"
IMPORT-EXISTING-MODULE: "core.stack-trace"

use: "core.cleanup"
IMPORT-EXISTING-MODULE: "core.cleanup"
let: (cleanup-and-terminate: message) do: [
    cleanup-all-modules
    terminate: message
]

# TODO: consider using everything in core automatically
let: *all-core-modules* = {
    "core.array"
    "core.assoc"
    "core.byte-array"
    "core.cleanup"
    "core.code"
    "core.combinator"
    "core.condition"
    "core.condition-handler"
    # "core.core" <-- don't do this!
    "core.dynamic-variable"
    "core.ffi"
    "core.fiber"
    "core.mixin"
    "core.mixin.private"
    "core.optional"
    "core.resource"
    "core.sentinel"
    "core.sequence"
    "core.sequence.array"
    "core.sequence.assoc"
    "core.sequence.byte-array"
    "core.sequence.vector"
    "core.stack-trace"
    "core.string"
    "core.tuple"
    "core.vector"
}

*all-core-modules* ~each: \m [
    try: [
        use: m
    ] except: {
        (Condition, \cond [
            print: "Error: could not load core module " ~ m ~ "."
            print: cond .condition ~ ": " ~ cond .message
            cond .stack print-trace
            cleanup-and-terminate: "could not load core module"
        ])
    }
]

IMPORT-EXISTING-MODULE: "core.bootstrap.load"
let: user-module-result = (try: [
    use: user-module-name path-loader: [user-source-path] contents-loader: [user-source-contents]
] except: {
    (Condition, \cond [
        print: "Error: could not load module " ~ user-module-name ~ "."
        print: cond .condition ~ ": " ~ cond .message
        cond .stack print-trace
        cleanup-and-terminate: "could not load module"
    ])
})

if: cleanup-all-modules then: [ user-module-result ] else: [
    terminate: "could not clean up modules"
]
