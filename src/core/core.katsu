IMPORT-EXISTING-MODULE: "core.builtin.extra"

let: (if: (cond: Bool) then: tbody else: fbody) do: [
    # TODO: `then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: (cond then: tbody else: fbody)
]

let: (if: (cond: Bool) then: tbody) do: [
    # TODO: `then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: (cond then: tbody else: null)
]

let: (while: (cond: Closure) do: (body: Closure)) do: [
    # TODO: `then:else:` should always tail-call -- it just needs to know whether it's tail position or not.
    TAIL-CALL: ((cond call) then: [
        body call
        TAIL-CALL: (while: cond do: body)
    ] else: null)
]


data: Optional has: {}
data: OptionalSome extends: { Optional } has: { value }
data: OptionalNone extends: { Optional } has: {}

let: (some: value) do: [ OptionalSome value: value ]
let: none          do: [ OptionalNone new ]

let: ((opt: OptionalSome) then: some-body else: none-body) do: [
    some-body call: opt .value
]
let: ((opt: OptionalNone) then: some-body else: none-body) do: [
    none-body call
]

# let: (signal: thing) do: [
#     pretty-print: thing
# ]

# let: ((opt: Optional) value!) do: [
#     opt then: [it] else: [signal: (NoneValue message: "none has no value")]
# ]

let: ((n: Fixnum) times: body) do: [
    mut: i = 0
    while: [i < n] do: [
        body call: i
        i: i + 1
    ]
]

let: (v: Vector) length do: [
    v unsafe-read-u64-at-offset: 1
]
let: (v: Vector) backing-array do: [
    v unsafe-read-value-at-offset: 2
]
let: ((v: Vector) unsafe-at: (i: Fixnum)) do: [
    v backing-array unsafe-at: i
]

let: (segment: CallSegment) length do: [
    segment unsafe-read-u64-at-offset: 1
]

data: Frame has: { segment; offset }
let: ((frame: Frame) unsafe-read-u64-at-offset: (offset: Fixnum)) do: [
    frame .segment unsafe-read-u64-at-offset: (2 + frame .offset + offset)
]
let: ((frame: Frame) unsafe-read-value-at-offset: (offset: Fixnum)) do: [
    frame .segment unsafe-read-value-at-offset: (2 + frame .offset + offset)
]
let: (frame: Frame) .code do: [
    frame unsafe-read-value-at-offset: 1
]
let: (frame: Frame) .inst-spot do: [
    frame .segment unsafe-read-u32-at-offset: (2 + frame .offset + 2) * 2
]
let: (frame: Frame) .#regs do: [
    frame unsafe-read-u64-at-offset: 3
]
let: (frame: Frame) .#data do: [
    frame unsafe-read-u64-at-offset: 4
]
let: (frame: Frame) .data-depth do: [
    frame unsafe-read-u64-at-offset: 5
]
let: (frame: Frame) .module do: [
    frame unsafe-read-value-at-offset: 6
]
let: (frame: Frame) .marker do: [
    frame unsafe-read-value-at-offset: 7
]
let: (frame: Frame) next do: [
    Frame segment: frame .segment offset: (
        frame .offset + 8 + frame .#regs + frame .#data
    )
]

let: (code: Code) .module do: [
    code unsafe-read-value-at-offset: 1
]
let: (code: Code) .#params do: [
    code unsafe-read-u32-at-offset: 2 * 2
]
let: (code: Code) .#regs do: [
    code unsafe-read-u32-at-offset: 2 * 2 + 1
]
let: (code: Code) .#data do: [
    code unsafe-read-u32-at-offset: 3 * 2
]
let: (code: Code) .upreg-map do: [
    code unsafe-read-value-at-offset: 4
]
let: (code: Code) .insts do: [
    code unsafe-read-value-at-offset: 5
]
let: (code: Code) .args do: [
    code unsafe-read-value-at-offset: 6
]
let: (code: Code) .span do: [
    code unsafe-read-value-at-offset: 7
]
let: (code: Code) .inst-spans do: [
    code unsafe-read-value-at-offset: 8
]

let: (t: Tuple) length do: [
    t unsafe-read-u64-at-offset: 1
]
let: ((t: Tuple) unsafe-at: (i: Fixnum)) do: [
    t unsafe-read-value-at-offset: 2 + i
]

let: (a: Array) length do: [
    a unsafe-read-u64-at-offset: 1
]
let: ((a: Array) unsafe-at: (i: Fixnum)) do: [
    a unsafe-read-value-at-offset: 2 + i
]

data: SourceLocation has: { index; line; column }
data: SourceSpan has: { file; start; end }
let: (t: Tuple) >SourceSpan do: [
    SourceSpan file: (t unsafe-at: 0) start: (
        SourceLocation index: (t unsafe-at: 1) line: (t unsafe-at: 2) column: (t unsafe-at: 3)
    ) end: (
        SourceLocation index: (t unsafe-at: 4) line: (t unsafe-at: 5) column: (t unsafe-at: 6)
    )
]

let: digit-strings = ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
let: (n: Fixnum) digit>string do: [
    digit-strings unsafe-at: n
]

let: ((a: Fixnum) mod: (n: Fixnum)) do: [ a - (a / n) * n ]

let: (s: String) >string do: [ s ]
let: (n: Fixnum) >string do: [
    n < 0 then: ["-" ~ (- n) >string] else: [
        n < 10 then: [n digit>string] else: [
            (n / 10) >string ~ (n mod: 10) digit>string
        ]
    ]
]
let: (_: Null) >string do: ["null"]
let: (b: Bool) >string do: [b then: "t" else: "f"]

let: v pr do: [
    print: v >string
    v
]

let: (span: SourceSpan) >string do: [
    "<" ~ span .file ~ ":" ~ (
        (span .start .line + 1) >string ~ ":" ~ (span .start .column + 1) >string
    ) ~ "-" ~ (
        (span .end .line + 1) >string ~ "." ~ (span .end .column + 1) >string
    ) ~ ">"
]

let: (shift: f) do: [ f call/marked: t ]
let: (reset: f) do: [ f call/dc: t ]

let: f with-return do: [
    shift: [
        f call: \v [ reset: [v] ]
    ]
]

let: (f cleanup: c) do: [
    [ f call ] call/marked: t
    c call
]

let: ((segment: CallSegment) each-frame: f) do: [
    mut: frame = (Frame segment: segment offset: 0)
    # TODO: multiplying by 8 (= sizeof(Value)) is super hacky here.
    while: [frame .offset * 8 < segment length] do: [
        f call: frame
        frame: frame next
    ]
]

let: (segment: CallSegment) print-trace-except-top do: [
    segment each-frame: \fr [
        # TODO: *8 here also super hacky
        let: top? = fr next .offset * 8 >= segment length
        if: not top? then: [
            # Go back one instruction; each frame indicates where to _return_ to, and the previous
            # op is the caller.
            let: span = (fr .code .inst-spans unsafe-at: (fr .inst-spot - 1)) >SourceSpan 
            print: "at " ~ (span >string)
        ]
    ]
]

data: Condition has: { condition; message }
data: NotImplemented extends: { Condition } has: {}
data: AssertionFailed extends: { Condition } has: {}
# TODO: subtypes instead of condition field

let: (signal: (c: Condition)) do: [
    # TODO: implement handlers / restarts
    print: "Error: " ~ c .condition ~ ": " ~ c .message
    let: stack = get-call-stack
    # Skip the top frame; it's pointing to within this method (to the get-call-stack invocation).
    stack print-trace-except-top
]

let: (condition handle-raw-condition-with-message: message) do: [
    signal: (Condition condition: condition message: message)
]
set-condition-handler-from-module

data: StopIteration has: { value }
let: ((v: Vector) each: f) do: [
    mut: i = 0
    mut: last = null
    while: [i < v length and not (last instance?: StopIteration)] do: [
        last
        last: (f call: (v unsafe-at: i))
        i: i + 1
    ]
    (last instance?: StopIteration) then: [ last .value ] else: [ last ]
]

data: Exception has: { message; stack }
# let: ((_ = Exception) message: message) does: [
#     Exception message: message stack: null
# ]

let: (e: Exception) throw do: [
    e stack: get-call-stack
    [e] call/dc: 0
]
# handlers should be a vector of (type, handler) pairs.
let: (try: body except: handlers) do: [
    let: result = (body call/marked: 0)
    (result instance?: Exception) then: [
        let: e = result
        # Search through handlers for a handler matching this exception.
        mut: handled = f
        let: handler-result = (handlers each: \h [
            handled
            let: handler-type = (h unsafe-at: 0)
            let: handler-fn = (h unsafe-at: 1)
            if: (e instance?: handler-type) then: [
                e; handled
                handled: t
                StopIteration value: (handler-fn call: e)
            ]
        ])
        handled then: [ handler-result ] else: [ e throw ]
    ] else: [
        result
    ]
]

let: (assert: (b: Bool)) do: [
    if: not b then: [
        signal: (AssertionFailed condition: "assertion-failure" message: "an assertion failed")
    ]
]

let: (ensure: p? by: a) do: [
    if: not (p? call) then: [
        a call
        assert: (p? call)
    ]
]

let: ((v: Vector) contains?: x) do: [
    v each: [ (it = x) then: [ StopIteration value: t ] else: f ]
]

let: (it do: f) do: [f call: it]

let: (find-module-file-path: (module-name: String)) do: [
    # TODO: do something more reasonable than this
    "src/" ~ module-name
]

let: ((a: Assoc) length) do: [
    a unsafe-read-u64-at-offset: 1
]
let: ((a: Assoc) backing-array) do: [
    a unsafe-read-value-at-offset: 2
]

let: ((v: Vector) push: x) do: [ v append: x ]
let: (v: Vector) pop do: [
    assert: v length > 0
    let: new-length = v length - 1
    let: end = (v unsafe-at: new-length)
    v unsafe-write-u64-at-offset: 1 value: new-length
    end
]

let: ((a: Array) unsafe-at: (i: Fixnum)) do: [
    a unsafe-read-value-at-offset: 2 + i
]
let: ((a: Assoc) each-key: f) do: [
    mut: i = 0
    mut: last = null
    while: [i < a length and not (last instance?: StopIteration)] do: [
        last
        last: (f call: (a backing-array unsafe-at: i * 2))
        i: i + 1
    ]
    (last instance?: StopIteration) then: [ last .value ] else: [ last ]
]
let: ((a: Assoc) contains?: k) do: [
    a each-key: [ (it = k) then: [ StopIteration value: t ] else: f ]
]

let: not-implemented do: [
    signal: (NotImplemented condition: "not-implemented" message: "not implemented")
]

let: ((module: Assoc) run-file: (path: String) contents: (contents: String) imports: (imports: Vector)) do: [
    let: run-context = (make-run-context-for-path: path contents: contents)
    [
        run-context; module; imports;
        mut: code = null
        while: [code; code: (run-context parse-and-compile-in-module: module imports: imports); code != null] do: [
            code call
        ]
    ] cleanup: [ run-context free ]
]

let: use-stack = {}
data: RecursiveUse has: { module-name }
let: (use: (module-name: String)) do: [
    # 1. find the right file path
    # 2. read the file contents
    # 3. create an empty module
    # 4. somehow use a cursor in order to:
    #     * ask C++ to parse and convert to Code (eventually should be in-language instead!)
    #     * then call the Code from here to add to that new module
    #     * and move to next spot in source
    # 5. add the new module to VM modules assoc
    # 6. use-existing-module
    #
    # maybe also add a stack of in-progress use: invocations to detect recursive imports

    (use-stack contains?: module-name) then: [
        signal: (RecursiveUse module-name: module-name)
    ] else: [
        module-name;
        ensure: [loaded-modules contains?: module-name] by: [
            let: path = (find-module-file-path: module-name)
            let: contents = (read-file: path)
            let: new-module = make-empty-assoc
            let: imports = {}
            imports use-default-modules
            loaded-modules add: module-name value: new-module
            [
                use-stack push: module-name
                new-module run-file: path contents: contents imports: imports
            ] cleanup: [ use-stack pop ]
        ]
        # TODO: need to switch this up
        # use-existing-module: module-name
    ]
]
